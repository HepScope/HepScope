#This code was established in google colab.

##Import library
!pip install import_ipynb
import import_ipynb
import matplotlib as mpl
mpl.style.use('seaborn')
import matplotlib.pyplot as plt 
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc, ConfusionMatrixDisplay, precision_recall_curve, f1_score,precision_score,recall_score # 성능 평가를 위한 함수
import numpy as np 
import pandas as pd 


#Import data
train_hep_Malig = pd.read_csv('./train_Malig.csv')
train_hep_Malig = train_hep_Malig.drop('Unnamed: 0', axis=1)
train_hep_Normal = pd.read_csv('./train_Normal.csv')
train_hep_Normal = train_hep_Normal.drop('Unnamed: 0', axis=1)
print("train_hep_Normal shape:",train_hep_Normal.shape)
print(train_hep_Normal.head())
print("────────────────────")
train_hep_Normal['label'] = 0
train_hep_Malig['label'] = 1
train_hep_X = pd.concat([train_hep_Normal, train_hep_Malig]).reset_index(drop=True)
train_hep_Y = train_hep_X['label'].values
train_hep_X = train_hep_X.drop(columns='label')


# Validation - Normal : 1000, Malig : 1000
val_hep_Normal = pd.read_csv("./val_Normal.csv")
val_hep_Normal = val_hep_Normal.drop('Unnamed: 0', axis=1)
val_hep_Malig= pd.read_csv("./val_Malig.csv")
val_hep_Malig = val_hep_Malig.drop('Unnamed: 0', axis=1)
val_hep_Normal['label'] = 0
val_hep_Malig['label'] = 1
val_hep_X = pd.concat([val_hep_Normal, val_hep_Malig]).reset_index(drop=True)
val_hep_Y = val_hep_X['label'].values
val_hep_X = val_hep_X.drop(columns='label')

# Test - Normal : 1000, Malig : 1000
test_hep_Normal = pd.read_csv("./test_Normal.csv")
test_hep_Normal = test_hep_Normal.drop('Unnamed: 0', axis=1)
test_hep_Malig = pd.read_csv("./test_Malig.csv")
test_hep_Malig = test_hep_Malig.drop('Unnamed: 0', axis=1)
test_hep_Normal['label'] = 0
test_hep_Malig['label'] = 1
test_hep_X = pd.concat([test_hep_Normal, test_hep_Malig]).reset_index(drop=True)
test_hep_Y = test_hep_X['label'].values
test_hep_X = test_hep_X.drop(columns='label')

print("train_hep_X shape:",train_hep_X.shape)
print(train_hep_X.head())
print("────────────────────")
print("train_hep_Y shape:",train_hep_Y.shape)
print(train_hep_Y.head())
print("────────────────────")
print("val_hep_X shape:",val_hep_X.shape)
print(val_hep_X.head())
print("────────────────────")
print("val_hep_Y shape:",val_hep_Y.shape)
print(val_hep_Y.head())
print("────────────────────")
print("test_hep_X shape:",test_hep_X.shape)
print(test_hep_X.head())
print("────────────────────")
print("test_hep_Y shape:",test_hep_Y.shape)
print(test_hep_Y.head())
print("────────────────────")



##Import pre-trained model
hep_model = load_model('./hep_model.h5')

##Check the performance of model
res_hep_y = [1 if res > 0.5 else 0 for res in hep_model.predict(test_hep_X, batch_size = 64, workers = 16)]

##Confusion matrix
print(confusion_matrix(test_hep_Y, res_hep_y))
print("Accuracy : %.4f "%accuracy_score(test_hep_Y, res_hep_y))
hep_pred = hep_model.predict(test_hep_X, workers = 16, batch_size = 64)
hep_fpr, hep_tpr, hep_threshold = roc_curve(test_hep_Y, hep_pred)
hep_roc_auc = auc(hep_fpr, hep_tpr)
hep_precision, hep_recall, hep_thresholds = precision_recall_curve(test_hep_Y, hep_pred)
hep_pr_auc = auc(hep_recall, hep_precision)
hep_f1=f1_score(test_hep_Y, res_hep_y)
hep_Precision=precision_score(test_hep_Y, res_hep_y)
hep_Recall=recall_score(test_hep_Y, res_hep_y)

##AUC, AUPRC, Precision, Recall, F1 score
print("hep_AUC : %.4f"%(hep_roc_auc))
print("hep_AUPRC : %.4f"%(hep_pr_auc))
print("hep_precision : %.4f"%(hep_Precision))
print("hep_recall : %.4f"%(hep_Recall))
print("hep_f1 : %.4f"%(hep_f1))
